# START ACTUALLY ORCHESTRATING:
#
# First thing is first...  Let's create self-signed SSL Certs
#
---
- hosts: localhost
  vars:
    avi_credentials:
      controller: 10.10.23.1
      username: "{{ username }}"
      password: "{{ password }}"
    APP: bar
    LB_persistence: ""
  #roles:
  #  - role: avinetworks.avisdk
  tasks:
    - name: Set passphrase key_file name
      set_fact: key_file="{{APP}}.key"

    - name: Set no passphrase key_file name
      set_fact: key_np_file="{{APP}}_np.key"

    - name: Set cert_file name
      set_fact: cert_file="{{APP}}_cert.pem"

    - name: Set cert_name
      set_fact: cert_name="{{APP}}_cert"

    - name: create self-signed SSL certs
      command: openssl req -new -newkey rsa:2048 -x509 -nodes -passout pass:ThisIsV3r1son -subj "/C=US/ST=Texas/L=Dallas/O=IT/CN={{APP}}" -days 365 -keyout "{{key_file}}" -out "{{cert_file}}"

    - name: Remove passphrase from private key
      command: openssl rsa -in "{{key_file}}" -out "{{key_np_file}}"

    - name: copy keys to AVI Controllers
      avi_sslkeyandcertificate:
        avi_credentials: "{{ avi_credentials }}"
        tenant: "admin"
        key: "{{ lookup('file', key_np_file) }}"
        type: SSL_CERTIFICATE_TYPE_VIRTUALSERVICE
        certificate:
          self_signed: true
          certificate: "{{ lookup('file', cert_file) }}"
        name: "{{ cert_name }}"

  #
  # Cleanup Ansible of any certs or keys as security measure
  #
    - name: delete private key from Ansible Tower
      command: rm {{APP}}.key

    - name: delete private key from Ansible Tower
      command: rm {{APP}}_np.key

    - name: delete public key from Ansible Tower
      command: rm {{APP}}_cert.pem

  #
  # Let's create a server pool for the fqdn
  #
    - name: Create a server pool for the application
      avi_pool:
        avi_credentials: "{{ avi_credentials }}"
        tenant: "admin"
        name: "{{ APP }}_vs_sg"
        state: present
      when: ("{{LB_persistence}}" != "None")

    - name: Create placeholder policy
      avi_httppolicyset:
        avi_credentials: "{{ avi_credentials }}"
        tenant: "admin"
        name: "{{ APP }}_vs_policy"
        state: present
        tenant_ref: "admin"
        http_request_policy:
         rules:
          - index: 1
            enable: false
            name: place-holder
            match:
              path:
                match_case: INSENSITIVE
                match_str:
                  - /
                match_criteria: EQUALS
            switching_action:
              action: HTTP_SWITCHING_SELECT_POOL
              status_code: HTTP_LOCAL_RESPONSE_STATUS_CODE_200
              pool_ref: "/api/pool?name={{ APP }}_vs_sg"
        is_internal_policy: false

    - avi_vsvip:
        name: vsvip-{{ APP }}_vs-Default-Cloud
        avi_credentials: '{{ avi_credentials }}' 
        api_context: '{{avi_api_context | default(omit)}}'
        tenant_ref: /api/tenant/?name={{ tenant }}
        cloud_ref: /api/cloud/?name=Default-Cloud
        state: "{{ state }}"
        vip:
        - vip_id: '1'
          avi_allocated_fip: false
          auto_allocate_ip: false
          enabled: true
          auto_allocate_floating_ip: false
          avi_allocated_vip: false
          auto_allocate_ip_type: V4_ONLY
          ip_address:
            type: V4
            addr: 198.51.100.253
  #
  # Now, create the virtual service using the basic information already collected
  #
    - name: Create Virtual Service
      avi_virtualservice:
        avi_credentials: "{{ avi_credentials }}"
        tenant: "admin"
        name: "{{ APP }}_vs"
        state: present
        services:
          - port: 443
            enable_ssl: true
          - port: 80
        ssl_profile_ref: "/api/sslprofile?name=System-Standard"
        application_profile_ref: "/api/applicationprofile?name=System-Secure-HTTP"
        ssl_key_and_certificate_refs:
          - "/api/sslkeyandcertificate?name={{cert_name}}"
        pool_ref: "/api/pool?name={{ APP }}_vs_sg"
        # We start at index 11 as AVI reserves the first 10 for internal use
        http_policies:
          - index: 11
            http_policy_set_ref: "/api/httppolicyset?name={{ APP }}_vs_policy"
        vsvip_ref: /api/vsvip/?name=vsvip-{{ APP }}_vs-Default-Cloud
      register: vip
    - debug: var=vip
