---
- connection: local
  hosts: localhost
  vars:
    avi_credentials:
      controller: 10.10.5.27
      username: admin
      password: "{{ password }}"
    tenant: admin
    cloud_name: avinetworks-aws
    subnets: 2C-nw-9,2A-nw-10,2A-nw-10
  tasks:
    - name: subnets args
      debug: msg="{{ subnets }}"
      tags:
        - debug
    - name: cloud name args
      debug: msg="{{ cloud_name }}"

    - name: Get cloud obj from the controller
      avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        tenant: "{{ tenant }}"
        http_method: get
        path: "cloud/?name={{ cloud_name }}"
      register: cloud_resp
    - name: Get filtered subnets from the controller
      tags:
        - debug
      avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        tenant: "{{ tenant }}"
        http_method: get
        path: "networksubnetlist/?cloud_uuid={{ cloud_resp.obj.results[0].uuid }}&name={{ item }}"
      register: subnet_filter_objs
      with_items: "{{ subnets.split(',') }}"
    - name: Filter the subnets that match the name
      set_fact:
        subnet_objs: "{{ subnet_objs|default({})|combine({item.1.name: item.1}) }}"
      when:
        - item.1.name in "{{ subnets.split(',') }}"
      with_subelements:
        - "{{ subnet_filter_objs.results }}"
        - obj.results
    - name: subnet objs
      debug: msg="{{ subnet_objs }}"

    - name: Create VIP Objects
      set_fact:
        vips: "{{ vips|default([]) + [{'vip_id': item.0, 'subnet_uuid': item.1.uuid, 'auto_allocate_ip': true}] }}"
      with_indexed_items:
        - "{{ subnet_objs.values() }}"

    - name: VIPS
      debug: msg="{{ vips }}"
